# -*- coding: utf-8 -*-
""" PRODUCTION SETTINGS 

Django settings for winelist project.


Generated by 'django-admin startproject' using Django 1.9.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
from django.utils.translation import ugettext_lazy as _

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '$!jcktf@i9$81j&t(a$tqx@6wj%^qvt)kbz@*)+tm#9dxik-ri'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
	'rest_framework',
	'djangobower',
	'corsheaders',
	'django_nose',
	'inventory',
	'sync.apps.SyncConfig',
	'django_jenkins',
]

MIDDLEWARE_CLASSES = [
	'django.middleware.security.SecurityMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
	'corsheaders.middleware.CorsMiddleware',
	'django.middleware.common.CommonMiddleware',
	'django.middleware.csrf.CsrfViewMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware',
	'django.middleware.locale.LocaleMiddleware',
]

ROOT_URLCONF = 'winelist.urls'

TEMPLATES = [
	{
		'BACKEND': 'django.template.backends.django.DjangoTemplates',
		'DIRS': [],
		'APP_DIRS': True,
		'OPTIONS': {
			'context_processors': [
				'django.template.context_processors.debug',
				'django.template.context_processors.request',
				'django.contrib.auth.context_processors.auth',
				'django.contrib.messages.context_processors.messages',
				'django.template.context_processors.i18n',
				'inventory.utils.default_controller_values',
			],
		},
	},
]

WSGI_APPLICATION = 'winelist.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

# DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.mysql',
#        'NAME': 'winecart',
#        'USER': 'root',
#        'PASSWORD': 'q1w2e3',
#        'HOST': 'localhost',   # Or an IP Address that your DB is hosted on
#        'PORT': '3306',
#    }
# }

DATABASES = {
	'default': {
		'ENGINE': 'django.db.backends.postgresql_psycopg2',
		'NAME': 'winary',
		'USER': 'winary',
		'PASSWORD': 'V1nk0',
		'HOST': 'localhost',
		'PORT': '',
	}
}

LOGIN_URL = '/accounts/login/'
# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
	{
		'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
	},
]

# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'sk_SK.utf-8'

TIME_ZONE = 'Europe/Bratislava'

# translation enable
USE_I18N = True

# if True convert float to actual locale
USE_L10N = False

# timezone enabled
USE_TZ = True

# Available languages
LANGUAGES = (
	('en', _('English')),
	('sk', _('Slovak')),
)

# specify path for translation files
LOCALE_PATHS = (
	os.path.join(BASE_DIR, 'locale'),
)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/static/'
#STATIC_ROOT = os.path.join(BASE_DIR, 'static')


# Static files for upload images
MEDIA_ROOT = os.path.join(BASE_DIR, 'static/data') #BASE_DIR + '/static/data/'  #STATIC_URL
MEDIA_URL = '/static/data/'

# init bower component
STATICFILES_FINDERS = [
	'djangobower.finders.BowerFinder',
	'django.contrib.staticfiles.finders.FileSystemFinder',
	'django.contrib.staticfiles.finders.AppDirectoriesFinder'
]

STATICFILES_DIRS = [
	os.path.join(BASE_DIR, "static"),
#	"/static/frontend/menu.html",
]

BOWER_COMPONENTS_ROOT = os.path.join(BASE_DIR, 'inventory/components')
BOWER_INSTALLED_APPS = [
	'jquery',
	'bootstrap',
	'datatables.net',
	'datatables.net-dt',
	'bootstrap-datepicker',
]

# Use nose to run all tests
TEST_RUNNER = 'django_nose.NoseTestSuiteRunner'

# Tell nose to measure coverage on the 'foo' and 'bar' apps
NOSE_ARGS = [
	'--with-coverage',
	'--cover-package=inventory,sync',
	'--cover-html',
	'--verbosity=1',
	'--cover-inclusive',
]

# rest framework setting
REST_FRAMEWORK = dict(DEFAULT_PERMISSION_CLASSES=[
	'rest_framework.permissions.IsAuthenticated',
], DEFAULT_PARSER_CLASSES=(
	'rest_framework.parsers.JSONParser',
), DEFAULT_RENDERER_CLASSES=(
	'rest_framework.renderers.JSONRenderer',
))

# CORS setting (https://github.com/ottoyiu/django-cors-headers/)
CORS_ORIGIN_ALLOW_ALL = True

LOGGING = {
	'version': 1,
	'disable_existing_loggers': False,
	'formatters': {
		'verbose': {
			'format': "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
			'datefmt': "%d/%b/%Y %H:%M:%S"
		},
		'simple': {
			'format': '%(levelname)s %(message)s'
		},
	},
	'handlers': {
		'file': {
			'level': 'DEBUG',
			'class': 'logging.FileHandler',
			'filename': 'winelist.log',
			'formatter': 'verbose'
		},
	},
	'loggers': {
		'django': {
			'handlers': ['file'],
			'propagate': True,
			'level': 'INFO',
		},
		'inventory': {
			'handlers': ['file'],
			'level': 'DEBUG',
		},
	}
}

JENKINS_TASKS = (
	'django_jenkins.tasks.run_pylint',
	'django_jenkins.tasks.with_coverage',
	'django_jenkins.tasks.run_pep8',
)
